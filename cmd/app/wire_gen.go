// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"database/sql"
	"github.com/google/wire"
	"github.com/reangeline/workout-plan-go/internal/domain/contracts/repositories"
	usecases2 "github.com/reangeline/workout-plan-go/internal/domain/contracts/usecases"
	"github.com/reangeline/workout-plan-go/internal/domain/usecases"
	"github.com/reangeline/workout-plan-go/internal/infra/database"
	"github.com/reangeline/workout-plan-go/internal/infra/http/controllers"
	"github.com/reangeline/workout-plan-go/internal/validation/protocols"
	"github.com/reangeline/workout-plan-go/internal/validation/validators"
)

// Injectors from wire.go:

func InitializeUserController(db *sql.DB) (*controllers.UserController, error) {
	userRepository := database.NewUserRepository(db)
	userUseCase := usecases.NewUserUseCase(userRepository)
	userValidator := validators.NewUserValidator()
	userController := controllers.NewUserController(userUseCase, userValidator)
	return userController, nil
}

// wire.go:

var setUserRepositoryDependency = wire.NewSet(database.NewUserRepository, wire.Bind(new(repositories.UserRepositoryInterface), new(*database.UserRepository)))

var setUserUseCaseDependency = wire.NewSet(usecases.NewUserUseCase, wire.Bind(new(usecases2.UserUseCaseInterface), new(*usecases.UserUseCase)))

var setUserValidatorDependency = wire.NewSet(validators.NewUserValidator, wire.Bind(new(protocols.UserValidatorInterface), new(*validators.UserValidator)))
